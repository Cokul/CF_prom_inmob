import os
import json
import streamlit as st
import shutil
from datetime import date, datetime 
import pandas as pd

# Importar la funci√≥n de estilos
from utils.styles import aplicar_estilos

# Activar modo ancho
st.set_page_config(layout="wide")

# Aplicar los estilos personalizados
aplicar_estilos()

# Inicializar datos
if "datos_proyecto" not in st.session_state:
    st.session_state["datos_proyecto"] = {}
datos = st.session_state["datos_proyecto"]

# Bienvenida
from bienvenida import mostrar_pantalla_bienvenida

# Importar la funci√≥n de la sidebar
from utils.sidebar import gestionar_proyecto_y_version

# Llamar a la funci√≥n para gestionar proyectos y versiones
gestionar_proyecto_y_version()

# M√≥dulos de inputs
from inputs.in_generales import cargar_inputs_generales
from inputs.in_ingresos import cargar_inputs_ingresos
from inputs.in_suelo import cargar_inputs_suelo
from inputs.in_ejecucion import cargar_inputs_ejecucion
from inputs.in_costes_indirectos import cargar_costes_indirectos
from inputs.in_costes_financieros_comerciales import cargar_costes_financieros_comerciales

# M√≥dulos de outputs
from outputs.out_ingresos import generar_tablas_ingresos
from outputs.out_costes_ejecucion import generar_tablas_costes_ejecucion
from outputs.out_costes_indirectos import generar_tablas_costes_indirectos
from outputs.out_costes_financieros import generar_tabla_costes_financieros

# M√≥dulos flujo de caja
from flujo_caja.flujo_caja import generar_tabla_flujo_caja

# M√≥dulos de gr√°ficas
from graficas.gr_ingresos import mostrar_graficas_ingresos
from graficas.gr_costes_ejecucion import mostrar_graficas_costes_ejecucion
from graficas.gr_resumen_acumulado import mostrar_grafico_resumen_acumulado

# Mostrar pantalla de bienvenida si no hay proyecto cargado
mostrar_pantalla_bienvenida()

# Mostrar versi√≥n actual cargada
ruta_actual = st.session_state.get("ruta_version_actual")
if ruta_actual and os.path.exists(ruta_actual):
    nombre_actual = os.path.splitext(os.path.basename(ruta_actual))[0]
    fecha_mod = datetime.fromtimestamp(os.path.getmtime(ruta_actual)).strftime("%Y-%m-%d %H:%M")
    st.info(f"üìÇ Versi√≥n cargada: `{nombre_actual}`  \nüïí √öltima modificaci√≥n: `{fecha_mod}`")
    

# üßÆ Pesta√±as principales
tabs = st.tabs(["üì• Inputs", "üìä Outputs", "üìà Flujo de Caja", "üìã Resumen", "üìâ Gr√°ficas"])

# üì• Pesta√±a Inputs
with tabs[0]:
    st.header("üì• Inputs del Proyecto")
    cargar_inputs_generales(datos)
    cargar_inputs_ingresos(datos)
    cargar_inputs_suelo(datos)
    cargar_inputs_ejecucion(datos)   
    cargar_costes_indirectos(datos)  
    cargar_costes_financieros_comerciales(datos) 

# üìä Pesta√±a Outputs
with tabs[1]:
    st.header("üìä Outputs auxiliares")
    st.info("Aqu√≠ se mostrar√°n los resultados intermedios por bloques: ingresos, costes, cronogramas, etc.")

    # Ingresos:
    with st.expander("üì¶ Ingresos", expanded=False):
        from outputs.out_ingresos import generar_tablas_ingresos
        generar_tablas_ingresos(datos)

    # Costes ejecuci√≥n:
    with st.expander("üèóÔ∏è Costes de ejecuci√≥n"):
        generar_tablas_costes_ejecucion(datos)

    # Costes indirectos
    with st.expander("üíº Costes indirectos"):
        generar_tablas_costes_indirectos(datos)

    # Costes financieros
    with st.expander("üè¶ Costes financieros"):
        generar_tabla_costes_financieros(datos)


# üìà Pesta√±a Flujo de Caja
with tabs[2]:
    st.header("üìà Flujo de Caja General")
    st.info("Aqu√≠ se integrar√° el flujo de caja consolidado mensual con todos los inputs procesados.")

    from flujo_caja.flujo_caja import generar_tabla_flujo_caja
    generar_tabla_flujo_caja(datos)

# üìã Pesta√±a Resumen
with tabs[3]:
    st.header("üìã Resumen del Proyecto")
    from resumen.resumen_general import mostrar_resumen_general
    mostrar_resumen_general(datos)

# üìä Pesta√±a Gr√°ficas
with tabs[4]:
    st.header("üìä Gr√°ficas del Proyecto")
    
    # Gr√°ficas ingresos
    with st.expander("üìà Gr√°ficas de ingresos", expanded=False):
        mostrar_graficas_ingresos(datos)

    # Gr√°ficas costes ejecuci√≥n
    with st.expander("üèóÔ∏è Gr√°ficas de costes de ejecuci√≥n", expanded=False):
        mostrar_graficas_costes_ejecucion(datos)

    # Gr√°fica tabla resumen acumulado
    with st.expander("üìä Gr√°fica de resumen acumulado", expanded=False):
        mostrar_grafico_resumen_acumulado(datos)

# with st.expander("1) Listado de tablas y claves de cada tabla", expanded=False):
#     for key, value in datos.items():
#         if isinstance(value, list):  # Asegurarse de que es una tabla
#             st.write(f"**Tabla: {key}**")
#             if len(value) > 0 and isinstance(value[0], dict):  # Si las filas de la tabla son diccionarios
#                 # Mostrar las claves de la primera fila de la tabla
#                 st.write(f"Claves de la tabla '{key}': {', '.join(value[0].keys())}")
#             else:
#                 st.write(f"No hay datos v√°lidos en la tabla '{key}'.")
#             st.write("")  # A√±adir un espacio entre tablas

# with st.expander("2) Listado de claves", expanded=False):
#     claves = [key for key in datos.keys()]
#     st.write(", ".join(claves))

# # Mostrar el contenido completo de los datos al final
# with st.expander("3) Resto de datos del debug actual", expanded=False):
#     st.write("Este es el contenido completo de los datos:", datos)